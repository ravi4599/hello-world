<%@ jet
imports="
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.INode
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.metadata.MappingTypeRetriever
        org.talend.core.model.metadata.MetadataTalendType
		org.talend.core.model.process.IConnection
		org.talend.core.model.utils.NodeUtil
        java.util.List
        java.util.ArrayList
        java.util.Map
        java.util.HashMap
"
skeleton="db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();

	String storageType = ElementParameterParser.getValue(node, "__AZURE_STORAGE__");
	String accountName = ElementParameterParser.getValue(node, "__ACCOUNT_NAME__");
	String accountSecret = ElementParameterParser.getValue(node, "__SECRET_KEY__");
	
	String principalKey = ElementParameterParser.getValue(node, "__PRINCIPAL_KEY__");
	String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
	String oauthEndpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");	
	
	String container = ElementParameterParser.getValue(node, "__CONTAINER__");

	String azureFolder = ElementParameterParser.getValue(node, "__AZURE_LOCATION__");
	
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

		
%>

	//AZURE DW CODE

<%


	dbLog = new DBLogUtil(node);

    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");

    String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");

    String dbhost = ElementParameterParser.getValue(node, "__HOST__");

    String dbport = ElementParameterParser.getValue(node, "__PORT__");

    String dbschema = ElementParameterParser.getValue(node, "__DB_SCHEMA__");

    String dbuser= ElementParameterParser.getValue(node, "__USER__");
	
    String table = ElementParameterParser.getValue(node,"__TABLE__");

    String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");

    getManager(dbmsId, cid, node);//register the MSSQLManager
	
	boolean isManualSchema = "true".equals(ElementParameterParser.getValue(node, "__MANUAL_SCHEMA__"));

	String schemaList = ElementParameterParser.getValue(node,"__MANUAL_SCHEMA_LIST__");
	
    String tableAction = ElementParameterParser.getValue(node,"__TABLE_ACTION__");
	
	String fieldSeparator = ElementParameterParser.getValueWithUIFieldKey(node,"__FIELDSEPARATOR__","FIELDSEPARATOR");
	
	String loadFileFormat = ElementParameterParser.getValue(node,"__IMPORT_TYPE__");
	
	String dateFormat = ElementParameterParser.getValue(node,"__DATE_FORMAT__");
	
	String datePattern = ElementParameterParser.getValue(node,"__DATE_PATTERN__");
	
	String useStringDelimiter = ElementParameterParser.getValue(node,"__USESTRINGDELIM__");
	
	String stringDelimiter = ElementParameterParser.getValueWithUIFieldKey(node,"__STRINGDELIMITER__","STRINGDELIMITER");
		
	String typeDefault = ElementParameterParser.getValue(node,"__USE_TYPE_DEFAULT__");
	
	boolean isCompress = "true".equals(ElementParameterParser.getValue(node, "__COMPRESS__"));
	
	String compressionType = null;
	
	String serdeMethod = null;
	
	if (isCompress) {
		if ("DELIMITED_TEXT".equals(loadFileFormat)) {
			
			compressionType = ElementParameterParser.getValue(node,"__COMPRESSION_TEXT__");
			
			
		} else if ("HIVE_RCFILE".equals(loadFileFormat)) {
			
			compressionType = ElementParameterParser.getValue(node,"__COMPRESSION_RC__");
			serdeMethod = ElementParameterParser.getValue(node,"__SERDE_METHOD__");
			
		} else if ("HIVE_ORC".equals(loadFileFormat)) {
			
			compressionType = ElementParameterParser.getValue(node,"__COMPRESSION_ORC__");
			
		} else if ("PARQUET".equals(loadFileFormat)) {
			
			compressionType = ElementParameterParser.getValue(node,"__COMPRESSION_PARQUET__");
			
		}
	} else {
	
			compressionType = "";
			serdeMethod = "";
	}
	
	// External Table Reject Options
	
	boolean isEnabled_ExtTableOptions = "true".equals(ElementParameterParser.getValue(node, "__EXT_TABLE_OPTIONS__"));
	
	String RejectType = ElementParameterParser.getValue(node,"__REJECT_TYPE__");
	
	String RejectValue = ElementParameterParser.getValue(node,"__REJECT_VALUE__");
	
	String RejectSampleValue = ElementParameterParser.getValue(node,"__REJECT_SAMPLE_VALUE__");	
	
	String DistributionOption = ElementParameterParser.getValue(node,"__DISTRIBUTION__");
	
	String DistributionColumnName = ElementParameterParser.getValue(node,"__DISTRIBUTION_COLUMN_NAME__");
	
	String TableOption = ElementParameterParser.getValue(node,"__TABLE_OPTION__");
	
	String IndexColumns = ElementParameterParser.getValue(node,"__INDEX_COLUMNS__");
	
	boolean isEnabled_Partition = "true".equals(ElementParameterParser.getValue(node, "__PARTITION__"));
	
	String PartitionColumnName = ElementParameterParser.getValue(node,"__PARTITION_COLUMN_NAME__");
	
	String PartitionRange = ElementParameterParser.getValue(node,"__PARTITION_COLUMN_NAME_RANGE__");
	
	String PartitionValues = ElementParameterParser.getValue(node,"__PARTITION_VALUES__");
	
	// External Table Reject Options END
	
	boolean usingStatsLogs=cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB");

    String rejectConnName = null;
    List<? extends IConnection> rejectConns = node.getOutgoingConnections("REJECT");
    if(rejectConns != null && rejectConns.size() > 0) {
        IConnection rejectConn = rejectConns.get(0);
        rejectConnName = rejectConn.getName();
    }

%>

	final String OUT_DELIM_<%=cid %> = <%=fieldSeparator %>;
	
	String randomIdentifier_<%=cid%> = java.util.UUID.randomUUID().toString().replaceAll("-","");
	
	String azureAccessKey_<%=cid%> = "";
	String azureCredIdentity_<%=cid%> = "";
	String azureCredName_<%=cid%> = "";
	String azureContainer_<%=cid%> = "";	
	
	String dbschema_<%=cid%> = null;
	//external tableName
	String ext_tableName_<%=cid%> = null;

	String tableName_<%=cid%> = null;
	String azureFolder_<%=cid%> = <%=azureFolder%>;
	
	String clientId_<%=cid%> = <%=clientId%>;
	String oauthEndpoint_<%=cid%> = <%=oauthEndpoint%>;
	
<%
	if ("ADLS".equals(storageType)) {
%>	
		azureAccessKey_<%=cid%> = <%=principalKey%>;
		azureCredIdentity_<%=cid%> = clientId_<%=cid%> + "@" + oauthEndpoint_<%=cid%>;
		azureCredName_<%=cid%> = "talend_ADLCredential_" + randomIdentifier_<%=cid%>;
<%
	} else {
%>	
		azureAccessKey_<%=cid%> = <%=accountSecret%>;
		azureCredIdentity_<%=cid%> = "talend";
		azureCredName_<%=cid%> = "talend_AzureStorageCredential_" + randomIdentifier_<%=cid%>;
		azureContainer_<%=cid%> = <%=container%>;
<%
	}
%>		
	
	String azureAccountName_<%=cid%> = <%=accountName%>;
	boolean whetherReject_<%=cid%> = false;
	

	
	
	String azureExtDataSrc_<%=cid%> = "talend_DataSource_" + randomIdentifier_<%=cid%>;
	String azureExtFileFormat_<%=cid%> = "talend_FileFormat_" + randomIdentifier_<%=cid%>;
<%
	if("CUSTOM".equals(useStringDelimiter)) {
%>	
	String azureExtStringDelim_<%=cid%> = <%=stringDelimiter%>;
<%
	}
	
	if("PATTERN".equals(dateFormat)) {
%>	
	String azureExtDatePattern_<%=cid%> = <%=datePattern%>;
<%
	}
%>		
	String azureFileLoadType_<%=cid%> = "<%=loadFileFormat%>";
	String azureCompressionType_<%=cid%> = "<%=compressionType%>";
	String azureSerdeMethod_<%=cid%> = "<%=serdeMethod%>";
	


	String externalTableRejectOptions_<%=cid%> = "";
	String dwDistributionOptions_<%=cid%> = "";
	String dwTableOptions_<%=cid%> = "";
	String dwPartition_<%=cid%> = "";

<%
List<IMetadataColumn> columnList = getColumnList(node);
List<Column> stmtStructure = null;
Manager manager = null;

boolean isDynamic = false;
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas!=null)&&(metadatas.size()>0)) {
    IMetadataTable metadata = metadatas.get(0);
	
}

if(columnList != null && columnList.size() > 0) {
		stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null);
}

%>

	//BEGIN CONNECTION Code 
	
java.sql.Connection conn_<%=cid%> = null;
<%
boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
boolean isEnableDatasource = false;
if(cid.indexOf("tMSSqlOutput")>-1 || cid.indexOf("tMSSqlSP")>-1 ){
	isEnableDatasource = true;
}
%>
String dbUser_<%=cid %> = null;
<%
if(useExistingConnection) {
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String conn = "conn_" + connection;
	String schema = "dbschema_" + connection;
	%>
	dbschema_<%=cid%> = (String)globalMap.get("<%=schema%>");
	conn_<%=cid%> = (java.sql.Connection)globalMap.get("<%=conn%>");
    <%
	INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(),connection);
	boolean specify_alias = "true".equals(ElementParameterParser.getValue(connectionNode, "__SPECIFY_DATASOURCE_ALIAS__"));
	if(isEnableDatasource && specify_alias){
		String alias = ElementParameterParser.getValue(connectionNode, "__DATASOURCE_ALIAS__");
		%>
		if (null == conn_<%=cid%>) {
			java.util.Map<String, routines.system.TalendDataSource> dataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
			conn_<%=cid%> = dataSources_<%=cid%>.get(<%=(null != alias && !("".equals(alias)))?alias:"\"\""%>).getConnection();
		}
	<%
	}
	%>
	<%dbLog.conn().useExistConn("conn_"+cid+".getMetaData().getURL()", "conn_"+cid+".getMetaData().getUserName()");%>
<%
} else {
	boolean specify_alias = "true".equals(ElementParameterParser.getValue(node, "__SPECIFY_DATASOURCE_ALIAS__"));   
	if(isEnableDatasource && specify_alias){
		String alias = ElementParameterParser.getValue(node, "__DATASOURCE_ALIAS__");
		%>
		java.util.Map<String, routines.system.TalendDataSource> dataSources_<%=cid%> = (java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
		if (null != dataSources_<%=cid%>) {
			conn_<%=cid %> = dataSources_<%=cid%>.get(<%=(null != alias && !("".equals(alias)))?alias:"\"\""%>).getConnection();
		} else {
	<%
	}
    %>
    dbschema_<%=cid%> = <%=dbschema%>;
    String driverClass_<%=cid%> = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
	<%dbLog.conn().logJDBCDriver(dbLog.var("driverClass"));%>
    java.lang.Class.forName(driverClass_<%=cid%>);
    String port_<%=cid%> = <%=dbport%>;
    String dbname_<%=cid%> = <%=dbname%> ;
    String url_<%=cid %> = "jdbc:sqlserver://" + <%=dbhost%> ; 
    if (!"".equals(port_<%=cid%>)) {
    	url_<%=cid %> += ":" + <%=dbport%>;
    }
    if (!"".equals(dbname_<%=cid%>)) {
    	url_<%=cid%> += ";database=" + <%=dbname%>; 
    }
    url_<%=cid%> += ";appName=" + projectName + ";" + <%=dbproperties%>;
    dbUser_<%=cid %> = <%=dbuser%>;

    <%
    String passwordFieldName = "__PASS__";
    %>

    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

    String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
    <%dbLog.conn().connTry(dbLog.var("url"), dbLog.var("dbUser"));%>	
    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
    <%dbLog.conn().connDone(dbLog.var("url"));%>
	<%
	if(isEnableDatasource && specify_alias){
	%>
		}
	<%
	}
}
%>

// END CONNECTION Code

<%
if(!useExistingConnection) {
	%>
		resourceMap.put("conn_<%=cid%>", conn_<%=cid%>);
		conn_<%=cid%>.setAutoCommit(true);
	<%

}
dbLog.commit().logAutoCommit("conn_"+cid+".getAutoCommit()");

%>

if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
    ext_tableName_<%=cid%> = <%=table%> + "_" + randomIdentifier_<%=cid%>;
} else {
    ext_tableName_<%=cid%> = dbschema_<%=cid%> + "].[" + <%=table%> + "_" + randomIdentifier_<%=cid%>;
}

if(dbschema_<%=cid%> == null || dbschema_<%=cid%>.trim().length() == 0) {
    tableName_<%=cid%> = <%=table%>;
} else {
    tableName_<%=cid%> = dbschema_<%=cid%> + "].[" + <%=table%>;
}
 
<%

if(isEnabled_ExtTableOptions){
	if("Value".equals(RejectType)){
%>

	externalTableRejectOptions_<%=cid%> = "REJECT_TYPE = VALUE,REJECT_VALUE = " + <%=RejectValue%>;
	
<%
	}else if("Percentage".equals(RejectType)){
%>

	externalTableRejectOptions_<%=cid%> = "REJECT_TYPE = PERCENTAGE,REJECT_VALUE = " + <%=RejectValue%> + ",REJECT_SAMPLE_VALUE = " + <%=RejectSampleValue%>;
	
<%	
	}
}else{
%>

	externalTableRejectOptions_<%=cid%> = "REJECT_TYPE = VALUE,REJECT_VALUE = 0";
	
<%	
}

if(("DROP_CREATE").equals(tableAction) || ("CREATE").equals(tableAction) || ("CREATE_IF_NOT_EXISTS").equals(tableAction) || ("DROP_IF_EXISTS_AND_CREATE").equals(tableAction)) {   

	// DW Table Options

	if("CLUSTERED_COLUMNSTORE_INDEX".equals(TableOption)){
%>	
		dwTableOptions_<%=cid%> = "CLUSTERED COLUMNSTORE INDEX, ";
<%
	}else if("HEAP".equals(TableOption)){
%>	
		dwTableOptions_<%=cid%> = "HEAP, ";
<%
	}else if("CLUSTERED_INDEX".equals(TableOption)){
%>	
		dwTableOptions_<%=cid%> = "CLUSTERED INDEX (" + <%=IndexColumns%> + "), ";
<%
	}

	// DW Table Options END

	// DW Distribution Options

	if("ROUND_ROBIN".equals(DistributionOption)){
%>	
		dwDistributionOptions_<%=cid%> = "DISTRIBUTION = ROUND_ROBIN";
<%
	}else if("REPLICATE".equals(DistributionOption)){
%>	
		dwDistributionOptions_<%=cid%> = "DISTRIBUTION = REPLICATE";
<%
	}else if("HASH".equals(DistributionOption)){
%>	
		dwDistributionOptions_<%=cid%> = "DISTRIBUTION = HASH(" + <%=DistributionColumnName%> + ")";
<%
	}

	// DW Distribution Options END

	// DW Table Partition

	if(isEnabled_Partition){
	
%>
		dwPartition_<%=cid%> = ", PARTITION ( [" + <%=PartitionColumnName%> + "] RANGE <%=PartitionRange%> FOR VALUES (" + <%=PartitionValues%> + ") )";	
<%
	
	}

	// DW Table Partition END

}


if( (columnList != null && columnList.size()>0) || (isManualSchema && !"".equals(schemaList)) ) {
if(!isDynamic) {
	%>
	int count_<%=cid%>=0;
	
<%	
	manager = getManager(dbmsId, cid);
    String ending="";
%>
   
	//Create a database scoped credential using Azure Access Key
	//IDENTITY: Provide any string, it is not used for authentication to Azure storage.
	//SECRET: Provide your Azure storage account key.
	
		java.sql.Statement stmtCreateDBCredentials_<%=cid%> = conn_<%=cid%>.createStatement();
		stmtCreateDBCredentials_<%=cid%>.execute("CREATE DATABASE SCOPED CREDENTIAL " + azureCredName_<%=cid%> + " WITH IDENTITY = '" + azureCredIdentity_<%=cid%> + "', SECRET = '" + azureAccessKey_<%=cid%> + "'");
		stmtCreateDBCredentials_<%=cid%>.close();

	
<%
		if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Created Database Scoped Credential: " + azureCredName_<%=cid%> + " WITH IDENTITY " + azureCredIdentity_<%=cid%> + " successfully.");
<%
		}
%> 	


	//Create an external data source
	//TYPE: HADOOP - PolyBase uses Hadoop APIs to access data in Azure blob storage.
	//LOCATION: Provide Azure storage account name and blob container name.
	//CREDENTIAL: Provide the credential created in the previous step.
	
		java.sql.Statement stmtCreateExtDataSource_<%=cid%> = conn_<%=cid%>.createStatement();
		
		<%
		if ("ADLS".equals(storageType)) {
		%>	
			stmtCreateExtDataSource_<%=cid%>.execute("CREATE EXTERNAL DATA SOURCE " + azureExtDataSrc_<%=cid%> + " WITH (TYPE=HADOOP, LOCATION = 'adl://" + azureAccountName_<%=cid%> + ".azuredatalakestore.net', CREDENTIAL = " + azureCredName_<%=cid%> + ")");
		<%
		} else {
		%>	
			stmtCreateExtDataSource_<%=cid%>.execute("CREATE EXTERNAL DATA SOURCE " + azureExtDataSrc_<%=cid%> + " WITH (TYPE=HADOOP, LOCATION = 'wasbs://" + azureContainer_<%=cid%> + "@" + azureAccountName_<%=cid%> + ".blob.core.windows.net', CREDENTIAL = " + azureCredName_<%=cid%> + ")");
		<%
		}
		%>	
		
		
		
		
		stmtCreateExtDataSource_<%=cid%>.close();
	
<%
			if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Created External Data Source: " + azureExtDataSrc_<%=cid%> + " WITH Credential " + azureCredName_<%=cid%> + " successfully.");
<%
			}
%> 

	
	//newCode END
	
		StringBuilder cmdExtFileFormat_<%=cid%> = new StringBuilder(); 
		java.sql.Statement stmtCreateExtFileFormat_<%=cid%> = conn_<%=cid%>.createStatement();
		
<%
		if("DELIMITED_TEXT".equals(loadFileFormat)){
%>	
			//cmdExtFileFormat_<%=cid%>.append("CREATE EXTERNAL FILE FORMAT ").append(azureExtFileFormat_<%=cid%>).append(" WITH (FORMAT_TYPE = DelimitedText, FORMAT_OPTIONS (FIELD_TERMINATOR = '").append(OUT_DELIM_<%=cid %>).append("')");
			cmdExtFileFormat_<%=cid%>.append("CREATE EXTERNAL FILE FORMAT ").append(azureExtFileFormat_<%=cid%>).append(" WITH (FORMAT_TYPE = DelimitedText, FORMAT_OPTIONS (FIELD_TERMINATOR = '").append(OUT_DELIM_<%=cid %>).append("'");
<%			
			if("TRUE".equals(typeDefault)){
%>
				cmdExtFileFormat_<%=cid%>.append(", USE_TYPE_DEFAULT = TRUE");
<%			
			}
			
			if("CUSTOM".equals(useStringDelimiter)){
%>
				cmdExtFileFormat_<%=cid%>.append(", STRING_DELIMITER = '").append(azureExtStringDelim_<%=cid%>).append("'");
<%			
			}
			
			if("PATTERN".equals(dateFormat)){
%>
				cmdExtFileFormat_<%=cid%>.append(", DATE_FORMAT = '").append(azureExtDatePattern_<%=cid%>).append("'");
<%			
			}
%>
			cmdExtFileFormat_<%=cid%>.append(")");
<%			
			if (!"".equals(compressionType)){
%>
				cmdExtFileFormat_<%=cid%>.append(", DATA_COMPRESSION = '").append(azureCompressionType_<%=cid%>).append("'");
<%
				}
%>			
			cmdExtFileFormat_<%=cid%>.append(")");
			System.out.println(cmdExtFileFormat_<%=cid%>.toString());
			stmtCreateExtFileFormat_<%=cid%>.execute(cmdExtFileFormat_<%=cid%>.toString());
<%		
		} else if("HIVE_RCFILE".equals(loadFileFormat)){
%>		
			cmdExtFileFormat_<%=cid%>.append("CREATE EXTERNAL FILE FORMAT ").append(azureExtFileFormat_<%=cid%>).append(" WITH (FORMAT_TYPE = RCFILE, SERDE_METHOD = '").append(azureSerdeMethod_<%=cid%>).append("'");
<%			
			if (!"".equals(compressionType)){
%>
				cmdExtFileFormat_<%=cid%>.append(", DATA_COMPRESSION = '").append(azureCompressionType_<%=cid%>).append("'");
<%				
			}
%>			
			cmdExtFileFormat_<%=cid%>.append(")");
			stmtCreateExtFileFormat_<%=cid%>.execute(cmdExtFileFormat_<%=cid%>.toString());
<%		
		} else if("HIVE_ORC".equals(loadFileFormat)){
%>	
			cmdExtFileFormat_<%=cid%>.append("CREATE EXTERNAL FILE FORMAT ").append(azureExtFileFormat_<%=cid%>).append(" WITH (FORMAT_TYPE = ORC");
<%			
			if (!"".equals(compressionType)){
%>
				cmdExtFileFormat_<%=cid%>.append(", DATA_COMPRESSION = '").append(azureCompressionType_<%=cid%>).append("'");
<%				
			}
%>			
			cmdExtFileFormat_<%=cid%>.append(")");
			stmtCreateExtFileFormat_<%=cid%>.execute(cmdExtFileFormat_<%=cid%>.toString());
<%		
		} else if("PARQUET".equals(loadFileFormat)){
%>	
			cmdExtFileFormat_<%=cid%>.append("CREATE EXTERNAL FILE FORMAT ").append(azureExtFileFormat_<%=cid%>).append(" WITH (FORMAT_TYPE = PARQUET");
<%			
			if (!"".equals(compressionType)){
%>
				cmdExtFileFormat_<%=cid%>.append(", DATA_COMPRESSION = '").append(azureCompressionType_<%=cid%>).append("'");
<%				
			}
%>					
			cmdExtFileFormat_<%=cid%>.append(")");
			stmtCreateExtFileFormat_<%=cid%>.execute(cmdExtFileFormat_<%=cid%>.toString());
<%		
		}
%>		
		stmtCreateExtFileFormat_<%=cid%>.close();

	
<%
			if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Created External File Format: " + azureExtFileFormat_<%=cid%> + " successfully.");
<%
			}
%> 
	
   //CREATE EXTERNAL TABLE
   
   java.sql.Statement stmtCreateExt_<%=cid%> = conn_<%=cid%>.createStatement();
   <%dbLog.table().createTry(dbLog.var("ext_tableName"));%>
   
   <%
   
   if (isManualSchema) {
   
   %>
   
		stmtCreateExt_<%=cid%>.execute("CREATE EXTERNAL TABLE [" + ext_tableName_<%=cid%> + "] (" + <%=schemaList%> + ")  WITH (LOCATION='/ " + azureFolder_<%=cid%> + "', DATA_SOURCE=" + azureExtDataSrc_<%=cid%> + ", FILE_FORMAT= " + azureExtFileFormat_<%=cid%> + "," + externalTableRejectOptions_<%=cid%> + ")");
   
   <%
   
   }else{
   
   %>
   
		stmtCreateExt_<%=cid%>.execute("<%=manager.getCreateTableSQL(stmtStructure)%>)  WITH (LOCATION='/ " + azureFolder_<%=cid%> + "', DATA_SOURCE=" + azureExtDataSrc_<%=cid%> + ", FILE_FORMAT= " + azureExtFileFormat_<%=cid%> + "," + externalTableRejectOptions_<%=cid%> + ")");
   
   <%
   
   }
   
   %>
   
   <%dbLog.table().createDone(dbLog.var("ext_tableName"));%>
   stmtCreateExt_<%=cid%>.close();
   
<%
			if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Created External Table : [" + ext_tableName_<%=cid%> + "] successfully.");
<%
			}
%>  
   
   // CREATE DW TABLE AND / OR INSERT INTO DW TABLE
  
   
	try{
<%

		if(!("NONE").equals(tableAction)) {
			if(("DROP_CREATE").equals(tableAction)) {
			%>
				java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();

				<%dbLog.table().dropTry(dbLog.var("tableName"));%>
				stmtDrop_<%=cid%>.execute("DROP TABLE [" + tableName_<%=cid%> + "]");
				<%dbLog.table().dropDone(dbLog.var("tableName"));%>
				stmtDrop_<%=cid%>.close();
				
				java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();

				<%dbLog.table().createTry(dbLog.var("tableName"));%>

				stmtCreate_<%=cid%>.execute("CREATE TABLE [" +  tableName_<%=cid%> + "] WITH (" + dwTableOptions_<%=cid%> + dwDistributionOptions_<%=cid%> + dwPartition_<%=cid%> + ") AS SELECT * FROM [" + ext_tableName_<%=cid%> + "] WHERE 1=2");

				<%dbLog.table().createDone(dbLog.var("tableName"));%>
				
				stmtCreate_<%=cid%>.close();
				
				java.sql.Statement stmtInsert_<%=cid%> = conn_<%=cid%>.createStatement();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - Starting INSERT into table : [" + tableName_<%=cid%> + "].");
				<%
				}
				%>  
				
				int insertedCount_<%=cid%> = stmtInsert_<%=cid%>.executeUpdate("INSERT INTO [" +  tableName_<%=cid%> + "] SELECT * FROM [" + ext_tableName_<%=cid%> + "]");
				
				globalMap.put("<%=cid%>_NB_LINE_INSERTED",insertedCount_<%=cid%>);

				stmtInsert_<%=cid%>.close();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - INSERT into table : [" + tableName_<%=cid%> + "] completed successfully.");
					log.info("<%=cid%> - Number of Rows Inserted : " + insertedCount_<%=cid%> + ".");
				<%
				}				
				
			} else if(("CREATE").equals(tableAction)) {
			%>
				java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();

				<%dbLog.table().createTry(dbLog.var("tableName"));%>

				stmtCreate_<%=cid%>.execute("CREATE TABLE [" +  tableName_<%=cid%> + "] WITH (" + dwTableOptions_<%=cid%> + dwDistributionOptions_<%=cid%> + dwPartition_<%=cid%> + ") AS SELECT * FROM [" + ext_tableName_<%=cid%> + "] WHERE 1=2");

				<%dbLog.table().createDone(dbLog.var("tableName"));%>
				
				stmtCreate_<%=cid%>.close();
				
				java.sql.Statement stmtInsert_<%=cid%> = conn_<%=cid%>.createStatement();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - Starting INSERT into table : [" + tableName_<%=cid%> + "].");
				<%
				}
				%>  
				
				int insertedCount_<%=cid%> = stmtInsert_<%=cid%>.executeUpdate("INSERT INTO [" +  tableName_<%=cid%> + "] SELECT * FROM [" + ext_tableName_<%=cid%> + "]");
				
				globalMap.put("<%=cid%>_NB_LINE_INSERTED",insertedCount_<%=cid%>);

				stmtInsert_<%=cid%>.close();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - INSERT into table : [" + tableName_<%=cid%> + "] completed successfully.");
					log.info("<%=cid%> - Number of Rows Inserted : " + insertedCount_<%=cid%> + ".");
				<%
				}				
				
			} else if(("CREATE_IF_NOT_EXISTS").equals(tableAction) || ("DROP_IF_EXISTS_AND_CREATE").equals(tableAction)) {
				boolean tableNameCaseSensitive=false;

				%>
				<%
				//to fixed: bug8422
				if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
				%>

						// [%connection%][checktable][tableName]
						String keyCheckTable_<%=cid %> = conn_<%=cid%> + "[checktable]" + "[" + <%=table%> + "]";
				   

						if(GlobalResource.resourceMap.get(keyCheckTable_<%=cid %>)== null){//}

						synchronized (GlobalResource.resourceLockMap.get(keyCheckTable_<%=cid %>)) {//}
						if(GlobalResource.resourceMap.get(keyCheckTable_<%=cid %>)== null){//}
				<%
				}
				%>
								//check if table exists
								java.sql.Statement isExistStmt_<%=cid%> = conn_<%=cid%>.createStatement();
								boolean whetherExist_<%=cid%> = false;
								
								try {
										isExistStmt_<%=cid%>.execute("SELECT TOP 1 1 FROM [" +  tableName_<%=cid%> + "]" );
										whetherExist_<%=cid%> = true;
									} catch (java.lang.Exception e){
										whetherExist_<%=cid%> = false;
									}
								isExistStmt_<%=cid%>.close();
								<%
								if(("CREATE_IF_NOT_EXISTS").equals(tableAction)) {
								%>
									if(!whetherExist_<%=cid%>) {
									
										java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();
										
										<%dbLog.table().createTry(dbLog.var("tableName"));%>
										
										stmtCreate_<%=cid%>.execute("CREATE TABLE [" +  tableName_<%=cid%> + "] WITH (" + dwTableOptions_<%=cid%> + dwDistributionOptions_<%=cid%> + dwPartition_<%=cid%> + ") AS SELECT * FROM [" + ext_tableName_<%=cid%> + "] WHERE 1=2");
										
										<%dbLog.table().createDone(dbLog.var("tableName"));%>
										
										stmtCreate_<%=cid%>.close();
										
									}
									
										java.sql.Statement stmtInsert_<%=cid%> = conn_<%=cid%>.createStatement();
										
										<%
										if(isLog4jEnabled) {
										%>
											log.info("<%=cid%> - Starting INSERT into table : [" + tableName_<%=cid%> + "].");
										<%
										}
										%>  
										
										int insertedCount_<%=cid%> = stmtInsert_<%=cid%>.executeUpdate("INSERT INTO [" +  tableName_<%=cid%> + "] SELECT * FROM [" + ext_tableName_<%=cid%> + "]");
										
										globalMap.put("<%=cid%>_NB_LINE_INSERTED",insertedCount_<%=cid%>);

										stmtInsert_<%=cid%>.close();
										
										<%
										if(isLog4jEnabled) {
										%>
											log.info("<%=cid%> - INSERT into table : [" + tableName_<%=cid%> + "] completed successfully.");
											log.info("<%=cid%> - Number of Rows Inserted : " + insertedCount_<%=cid%> + ".");
										<%
										}										
										%>
									
								<%
								} else {
								%>
									if(whetherExist_<%=cid%>) {
									
										java.sql.Statement stmtDrop_<%=cid%> = conn_<%=cid%>.createStatement();

										<%dbLog.table().dropTry(dbLog.var("tableName"));%>
										
										
										stmtDrop_<%=cid%>.execute("DROP TABLE [" + tableName_<%=cid%> + "]");
										
										<%dbLog.table().dropDone(dbLog.var("tableName"));%>
										
										stmtDrop_<%=cid%>.close();

									}
									
									java.sql.Statement stmtCreate_<%=cid%> = conn_<%=cid%>.createStatement();

									<%dbLog.table().createTry(dbLog.var("tableName"));%>
									
									stmtCreate_<%=cid%>.execute("CREATE TABLE [" +  tableName_<%=cid%> + "] WITH (" + dwTableOptions_<%=cid%> + dwDistributionOptions_<%=cid%> + dwPartition_<%=cid%> + ") AS SELECT * FROM [" + ext_tableName_<%=cid%> + "] WHERE 1=2");
			
									<%dbLog.table().createDone(dbLog.var("tableName"));%>
									
									stmtCreate_<%=cid%>.close();
									
									java.sql.Statement stmtInsert_<%=cid%> = conn_<%=cid%>.createStatement();
									
									<%
									if(isLog4jEnabled) {
									%>
										log.info("<%=cid%> - Starting INSERT into table : [" + tableName_<%=cid%> + "].");
									<%
									}
									%>  
									
									int insertedCount_<%=cid%> = stmtInsert_<%=cid%>.executeUpdate("INSERT INTO [" +  tableName_<%=cid%> + "] SELECT * FROM [" + ext_tableName_<%=cid%> + "]");
									
									globalMap.put("<%=cid%>_NB_LINE_INSERTED",insertedCount_<%=cid%>);

									stmtInsert_<%=cid%>.close();
									
									<%
									if(isLog4jEnabled) {
									%>
										log.info("<%=cid%> - INSERT into table : [" + tableName_<%=cid%> + "] completed successfully.");
										log.info("<%=cid%> - Number of Rows Inserted : " + insertedCount_<%=cid%> + ".");
									<%
									}									

								}
								%>
				<%
				//to fixed: bug8422
				if((cid.equals("talendLogs_DB") || cid.equals("talendStats_DB") || cid.equals("talendMeter_DB"))){
				%>
								GlobalResource.resourceMap.put(keyCheckTable_<%=cid %>, true);
				//{{{
							} // end of if
						} // end synchronized
					}
				<%
				}
				%>
			<%
			} else if(("CLEAR").equals(tableAction)) {
			%>
				java.sql.Statement stmtClear_<%=cid%> = conn_<%=cid%>.createStatement();

				<%dbLog.table().clearTry(dbLog.var("tableName"));%>
				
				stmtClear_<%=cid%>.executeUpdate("<%=manager.getDeleteTableSQL()%>");
				
				<%dbLog.table().clearDone(dbLog.var("tableName"));%>
				
				stmtClear_<%=cid%>.close();
				
				java.sql.Statement stmtInsert_<%=cid%> = conn_<%=cid%>.createStatement();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - Starting INSERT into table : [" + tableName_<%=cid%> + "].");
				<%
				}
				%>  
				
				int insertedCount_<%=cid%> = stmtInsert_<%=cid%>.executeUpdate("INSERT INTO [" +  tableName_<%=cid%> + "] SELECT * FROM [" + ext_tableName_<%=cid%> + "]");
				
				globalMap.put("<%=cid%>_NB_LINE_INSERTED",insertedCount_<%=cid%>);

				stmtInsert_<%=cid%>.close();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - INSERT into table : [" + tableName_<%=cid%> + "] completed successfully.");
					log.info("<%=cid%> - Number of Rows Inserted : " + insertedCount_<%=cid%> + ".");
				<%
				}
				%>  
			<%
			} else if(("TRUNCATE").equals(tableAction)) {
			%>
				java.sql.Statement stmtTruncCount_<%=cid%> = conn_<%=cid%>.createStatement();

				java.sql.ResultSet rsTruncCount_<%=cid%> = stmtTruncCount_<%=cid%>.executeQuery("<%=manager.getSelectionSQL()%>");
				int rsTruncCountNumber_<%=cid%> = 0;
				if(rsTruncCount_<%=cid%>.next()) {
					rsTruncCountNumber_<%=cid%> = rsTruncCount_<%=cid%>.getInt(1);
				}
				rsTruncCount_<%=cid%>.close();
				stmtTruncCount_<%=cid%>.close();
				java.sql.Statement stmtTrunc_<%=cid%> = conn_<%=cid%>.createStatement();

				<%dbLog.table().truncateTry(dbLog.var("tableName"));%>
				
				stmtTrunc_<%=cid%>.executeUpdate("<%=manager.getTruncateTableSQL()%>");

				<%dbLog.table().truncateDone(dbLog.var("tableName"));%>
				
				deletedCount_<%=cid%> += rsTruncCountNumber_<%=cid%>;
				
				stmtTrunc_<%=cid%>.close();
				
				java.sql.Statement stmtInsert_<%=cid%> = conn_<%=cid%>.createStatement();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - Starting INSERT into table : [" + tableName_<%=cid%> + "].");
				<%
				}
				%>  
				
				int insertedCount_<%=cid%> = stmtInsert_<%=cid%>.executeUpdate("INSERT INTO [" +  tableName_<%=cid%> + "] SELECT * FROM [" + ext_tableName_<%=cid%> + "]");
				
				globalMap.put("<%=cid%>_NB_LINE_INSERTED",insertedCount_<%=cid%>);

				stmtInsert_<%=cid%>.close();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - INSERT into table : [" + tableName_<%=cid%> + "] completed successfully.");
					log.info("<%=cid%> - Number of Rows Inserted : " + insertedCount_<%=cid%> + ".");
				<%
				}
				%>  

			<%
			} 
		}else {
			%>
				java.sql.Statement stmtInsert_<%=cid%> = conn_<%=cid%>.createStatement();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - Starting INSERT into table : [" + tableName_<%=cid%> + "].");
				<%
				}
				%>  
				
				int insertedCount_<%=cid%> = stmtInsert_<%=cid%>.executeUpdate("INSERT INTO [" +  tableName_<%=cid%> + "] SELECT * FROM [" + ext_tableName_<%=cid%> + "]");
				
				globalMap.put("<%=cid%>_NB_LINE_INSERTED",insertedCount_<%=cid%>);

				stmtInsert_<%=cid%>.close();
				
				<%
				if(isLog4jEnabled) {
				%>
					log.info("<%=cid%> - INSERT into table : [" + tableName_<%=cid%> + "] completed successfully.");
					log.info("<%=cid%> - Number of Rows Inserted : " + insertedCount_<%=cid%> + ".");
				<%
				}
				%>  
			<%
			}

%>
	} catch (java.sql.SQLException e_<%=cid%>) {
<%
			if(isLog4jEnabled) {
%>
				log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
<%
			}
%>

			java.sql.Statement stmtDropExtTable_<%=cid%> = conn_<%=cid%>.createStatement();
			stmtDropExtTable_<%=cid%>.execute("DROP EXTERNAL TABLE [" + ext_tableName_<%=cid%> + "]");
			stmtDropExtTable_<%=cid%>.close();
<%
			if(isLog4jEnabled) {
%>
				log.info("<%=cid%> - Dropped External Table : [" + ext_tableName_<%=cid%> + "] successfully.");
<%
			}
%>  

			java.sql.Statement stmtDropExtFileFormat_<%=cid%> = conn_<%=cid%>.createStatement();
			stmtDropExtFileFormat_<%=cid%>.execute("DROP EXTERNAL FILE FORMAT [" + azureExtFileFormat_<%=cid%> + "]");
			stmtDropExtFileFormat_<%=cid%>.close();
<%
			if(isLog4jEnabled) {
%>
				log.info("<%=cid%> - Dropped External File Format : [" + azureExtFileFormat_<%=cid%> + "] successfully.");
<%
			}
%>  

			java.sql.Statement stmtDropExtDataSrc_<%=cid%> = conn_<%=cid%>.createStatement();
			stmtDropExtDataSrc_<%=cid%>.execute("DROP EXTERNAL DATA SOURCE [" + azureExtDataSrc_<%=cid%> + "]");
			stmtDropExtDataSrc_<%=cid%>.close();
<%
			if(isLog4jEnabled) {
%>
				log.info("<%=cid%> - Dropped External Data Source : [" + azureExtDataSrc_<%=cid%> + "] successfully.");
<%
			}
%>

			java.sql.Statement stmtDropDatabaseCred_<%=cid%> = conn_<%=cid%>.createStatement();
			stmtDropDatabaseCred_<%=cid%>.execute("DROP DATABASE SCOPED CREDENTIAL [" + azureCredName_<%=cid%> + "]");
			stmtDropDatabaseCred_<%=cid%>.close();
<%
			if(isLog4jEnabled) {
%>
				log.info("<%=cid%> - Dropped Database Scoped Credential : [" + azureCredName_<%=cid%> + "] successfully.");
<%
			}
%>   


			throw e_<%=cid%>;
	}
		
		java.sql.Statement stmtDropExtTable_<%=cid%> = conn_<%=cid%>.createStatement();
		stmtDropExtTable_<%=cid%>.execute("DROP EXTERNAL TABLE [" + ext_tableName_<%=cid%> + "]");
        stmtDropExtTable_<%=cid%>.close();
<%
		if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Dropped External Table : [" + ext_tableName_<%=cid%> + "] successfully.");
<%
		}
%>  

		java.sql.Statement stmtDropExtFileFormat_<%=cid%> = conn_<%=cid%>.createStatement();
		stmtDropExtFileFormat_<%=cid%>.execute("DROP EXTERNAL FILE FORMAT [" + azureExtFileFormat_<%=cid%> + "]");
        stmtDropExtFileFormat_<%=cid%>.close();
<%
		if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Dropped External File Format : [" + azureExtFileFormat_<%=cid%> + "] successfully.");
<%
		}
%>  

		java.sql.Statement stmtDropExtDataSrc_<%=cid%> = conn_<%=cid%>.createStatement();
		stmtDropExtDataSrc_<%=cid%>.execute("DROP EXTERNAL DATA SOURCE [" + azureExtDataSrc_<%=cid%> + "]");
        stmtDropExtDataSrc_<%=cid%>.close();
<%
		if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Dropped External Data Source : [" + azureExtDataSrc_<%=cid%> + "] successfully.");
<%
		}
%>

		java.sql.Statement stmtDropDatabaseCred_<%=cid%> = conn_<%=cid%>.createStatement();
		stmtDropDatabaseCred_<%=cid%>.execute("DROP DATABASE SCOPED CREDENTIAL [" + azureCredName_<%=cid%> + "]");
        stmtDropDatabaseCred_<%=cid%>.close();
<%
		if(isLog4jEnabled) {
%>
			log.info("<%=cid%> - Dropped Database Scoped Credential : [" + azureCredName_<%=cid%> + "] successfully.");
<%
		}
%>   
   
   
   <%
} //end isDynamic

    if (useExistingConnection) {
    	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
 %>
 	boolean isShareIdentity_<%=cid%> = globalMap.get("shareIdentitySetting_<%=connection%>") != null && (Boolean)globalMap.get("shareIdentitySetting_<%=connection%>") == true;
 <%
 	}
} 

if(!useExistingConnection) {
	%>
		conn_<%=cid%>.close();
	<%

}



%>
	
  
